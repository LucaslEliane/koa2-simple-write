;(function(window) {

  var svgSprite = '<svg>' +
    '' +
    '<symbol id="icon-wanke" viewBox="0 0 1316 1024">' +
    '' +
    '<path d="M1313.923834 341.12c0 19.776 0.448 27.84-40.64 27.84-41.088 0-40.704-7.488-40.704-27.968 0-14.848-0.32-38.848-0.32-56.512 0-17.664-11.712-33.856-32.256-33.856-20.544 0-378.752 0-378.752 0-13.504-0.896-32.512 19.52-32.32 33.344l-0.256 57.728c0.192 18.496-8.512 27.392-40.64 27.2C715.011834 369.28 706.691834 357.76 706.435834 340.544c0 0-0.384-45.056-0.384-93.184 0-48.128 18.752-56.768 68.096-56.768l187.072 0c-21.44-42.816 1.792-41.6 22.784-52.928 20.224-10.112 36.864-18.112 46.848 7.168 4.48 8.832 15.104 32.576 18.432 45.76 0 0 151.36-0.448 198.592 0 52.864 0.512 66.304 14.976 67.008 50.304C1315.459834 276.352 1313.923834 321.344 1313.923834 341.12zM722.115834 480.192c58.176-3.776 121.792-11.776 158.976-19.776 20.352-5.056 39.744-10.304 58.048-15.808-25.728-16-47.808-32.32-66.112-48.832 7.36-5.888-18.112 9.472-43.648 25.408-10.112 3.776-17.536 3.84-34.112-18.688-15.296-22.4-12.224-34.496-0.512-41.344 26.496-15.488 61.056-37.184 66.368-42.24 8.512-8.576 17.408-15.36 26.624-20.928 9.28-6.464 22.848-3.52 40.768-5.248l219.136 0.64c16.128-0.448 29.76 1.92 38.208 12.736 7.616 9.92 9.536 16.256 8.512 28.288-0.96 11.136-7.168 22.72-18.752 34.624-29.952 35.392-96.64 81.344-86.528 74.432 21.12 8 41.472 14.528 61.12 19.584 28.992 7.552 73.216 16.704 118.144 22.144 22.336 2.432 30.976 9.792 20.864 38.656-8.32 25.856-15.296 35.52-32.384 34.944-6.4-2.624-144.704-31.04-247.232-73.792 25.92-10.048-134.4 51.584-282.752 66.56C699.523834 552.448 699.011834 541.696 699.395834 514.304 700.867834 498.816 693.699834 483.264 722.115834 480.192zM1018.691834 411.712c15.424-8 68.736-42.112 71.296-44.48 4.8-3.84 4.736-10.496 3.2-12.16-2.816-2.112-8.32-2.88-13.76-2.88l-136.448 0c-10.816 1.728-1.152 9.856-1.216 10.24C982.595834 395.136 1030.467834 418.368 1018.691834 411.712zM1250.499834 558.208c2.368 0.32 4.416 0.512 6.464 0.576C1257.923834 559.168 1256.067834 558.976 1250.499834 558.208zM818.435834 832.704c199.168 19.264 288.32-69.504 298.88-153.6 6.528-52.224-30.784-110.272-117.888-106.816-70.016 2.752-83.008 72.768-81.6 92.608 1.408 19.648-27.072 58.816-63.36 40.448-49.984-25.28-20.672-104.64 17.28-137.92 101.056-88.576 337.28-40.064 320.512 108.096-21.376 188.416-220.672 239.168-398.336 214.784-38.08-5.248-302.72-53.248-301.504-298.368C492.675834 513.152 493.443834 460.16 493.827834 437.376L427.843834 437.504 427.779834 563.008c-0.64 14.784-3.264 77.056-32.192 145.536-5.568 12.288-68.48 131.136-122.944 122.24-17.088-3.072-42.304-32.512-40.128-47.232 4.928-16.96 38.08-29.824 57.536-53.568 1.536-1.728 37.888-40.448 47.744-94.464C341.827834 621.44 345.027834 572.48 345.219834 563.008L344.899834 437.632l-8.512 0L336.259834 437.632 276.227834 437.632c-10.56 0-21.184-0.832-21.184-18.496 0-1.984 0.128-21.952 0.192-23.872C255.555834 379.712 262.787834 377.472 282.499834 377.472l349.568 0c19.328 0 24.448 0.32 25.6 17.6-0.256 11.648 0 21.056 0 23.04 0 15.552-4.48 19.008-25.088 19.008L575.107834 437.248C574.851834 459.2 574.403834 508.8 574.595834 589.504 574.979834 724.544 691.203834 820.416 818.435834 832.704zM616.259834 242.24 327.811834 242.24C312.707834 240.448 304.451834 242.112 304.131834 225.024c0-0.512 0-25.408 0-25.92C307.523834 182.976 313.475834 184.192 329.219834 182.4l288.192 0C633.347834 184.064 638.723834 185.856 640.835834 200c0.192 1.088 0.256 23.424 0.384 24.64C638.659834 242.624 633.795834 240.448 616.259834 242.24zM254.851834 233.152c0.448 14.08-8.96 16.064-23.552 17.536L164.867834 250.688l0 203.328 39.168 0c17.152 1.792 25.28 0.64 26.368 16.768C230.147834 472.576 230.275834 494.528 229.891834 496.192c-3.648 14.72-12.8 16.064-28.544 17.664l-36.48 0 0 164.16 32.96-17.92c16.064-6.528 21.952 1.92 30.016 15.744 5.76 17.216 9.984 23.936-4.864 33.856l-190.08 104.128c-14.656 5.76-20.736-3.2-28.608-19.328-4.16-15.936-7.808-23.04 5.44-32.128l72.768-39.552L82.499834 513.856l-43.648 0C24.643834 512.192 17.475834 511.744 16.323834 496.64 16.195834 495.104 16.707834 472.384 16.707834 470.72 20.035834 454.592 28.611834 455.808 44.355834 454.016l38.08 0L82.435834 250.688l-57.472 0c-12.608-1.472-25.216 0.192-24.96-17.536 0.064-5.184 0.256-24.512 0.256-24.512 0.256-19.328 8.32-17.6 24.576-17.792l206.08 0c18.112 0 25.408 0.448 23.744 18.368C254.787834 214.848 254.787834 230.336 254.851834 233.152z"  ></path>' +
    '' +
    '</symbol>' +
    '' +
    '</svg>'
  var script = function() {
    var scripts = document.getElementsByTagName('script')
    return scripts[scripts.length - 1]
  }()
  var shouldInjectCss = script.getAttribute("data-injectcss")

  /**
   * document ready
   */
  var ready = function(fn) {
    if (document.addEventListener) {
      if (~["complete", "loaded", "interactive"].indexOf(document.readyState)) {
        setTimeout(fn, 0)
      } else {
        var loadFn = function() {
          document.removeEventListener("DOMContentLoaded", loadFn, false)
          fn()
        }
        document.addEventListener("DOMContentLoaded", loadFn, false)
      }
    } else if (document.attachEvent) {
      IEContentLoaded(window, fn)
    }

    function IEContentLoaded(w, fn) {
      var d = w.document,
        done = false,
        // only fire once
        init = function() {
          if (!done) {
            done = true
            fn()
          }
        }
        // polling for no errors
      var polling = function() {
        try {
          // throws errors until after ondocumentready
          d.documentElement.doScroll('left')
        } catch (e) {
          setTimeout(polling, 50)
          return
        }
        // no errors, fire

        init()
      };

      polling()
        // trying to always fire before onload
      d.onreadystatechange = function() {
        if (d.readyState == 'complete') {
          d.onreadystatechange = null
          init()
        }
      }
    }
  }

  /**
   * Insert el before target
   *
   * @param {Element} el
   * @param {Element} target
   */

  var before = function(el, target) {
    target.parentNode.insertBefore(el, target)
  }

  /**
   * Prepend el to target
   *
   * @param {Element} el
   * @param {Element} target
   */

  var prepend = function(el, target) {
    if (target.firstChild) {
      before(el, target.firstChild)
    } else {
      target.appendChild(el)
    }
  }

  function appendSvg() {
    var div, svg

    div = document.createElement('div')
    div.innerHTML = svgSprite
    svgSprite = null
    svg = div.getElementsByTagName('svg')[0]
    if (svg) {
      svg.setAttribute('aria-hidden', 'true')
      svg.style.position = 'absolute'
      svg.style.width = 0
      svg.style.height = 0
      svg.style.overflow = 'hidden'
      prepend(svg, document.body)
    }
  }

  if (shouldInjectCss && !window.__iconfont__svg__cssinject__) {
    window.__iconfont__svg__cssinject__ = true
    try {
      document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>");
    } catch (e) {
      console && console.log(e)
    }
  }

  ready(appendSvg)


})(window)